# Eingebettetes Runge-Kutta-Verfahren fÃ¼r den Arenstorf-Orbit

#%%

import numpy as np
import matplotlib.pyplot as plt

#%% Two Body Problem

def F_call(u):
    x = u[0]
    y = u[1]
    xx = u[2]
    yy = u[3] 
    
    my = 0.012277471
    mym = 1 - my
    
    D1 = ((x + my)**2 + y**2)**(3/2)
    D2 = ((x - mym)**2 + y**2)**(3/2)
    
    u_neu = np.array([xx,
                      yy,
                      x + 2*yy - mym*(x+my)/D1 - my*(x-mym)/D2,
                      y - 2*xx - mym*y/D1 - my*y/D2])
    
    return u_neu

#%% Eingebettetes Runge-Kutta-Verfahren, Stufen 2 und 4

def eing_runge_kutta(u0, tau_0, A, b1, b2, nbr_Steps, tol):
    u_tk = u0
    res = []
    res.append(u_tk)
    
    for k in range(1, nbr_Steps):
        tau = tau_0
        f_i = []
        for i in range(4):
            sum = 0
            for j in range(i):
                sum += A[i,j]*f_i[j]
            f_i.append(F_call(u_tk + tau*sum))
        
        sum1 = 0
        for i in range(2):
            sum1 += b1[i]*f_i[i]
        u_tk1_Plus1 = u_tk + tau*sum1
        sum2 = 0
        for i in range(4):
            sum2 += b2[i]*f_i[i]
        u_tk2_Plus1 = u_tk + tau*sum2
        
        while np.linalg.norm(u_tk1_Plus1 - u_tk2_Plus1) > tol:   #!!!would it be better, if I would look 
                                                                #at the differences within the singe components 
                                                                #of the vector instead of looking at the norm 
                                                                #of the difference?
            tau = 0.8 * tau
            
            f_i = []
            for i in range(4):
                sum = 0
                for j in range(i):
                    sum += A[i,j]*f_i[j]
                f_i.append(F_call(u_tk + tau*sum))
            sum1 = 0
            for i in range(2):
                sum1 += b1[i]*f_i[i]
            u_tk1_Plus1 = u_tk + tau*sum1
            sum2 = 0
            for i in range(4):
                sum2 += b2[i]*f_i[i]
            u_tk2_Plus1 = u_tk + tau*sum2
            
        u_tkPlus1 = u_tk2_Plus1
        res.append(u_tkPlus1)
         
        # Prepare for next step
        u_tk = u_tkPlus1
        
    return np.array(res)
