# implizites Eulerverfahren

#%%

import numpy as np
import matplotlib.pyplot as plt

#%% Funktion

def F_call(u):
    #return F ausgewertet an der Stelle u
    G = 2.959795663*(10**(-4))
    M = 1
    r = np.linalg.norm(u[0:2])
    a = -G*M/(r**3)

    return np.array([u[2],u[3],a*u[0],a*u[1]])

def func(u_1, u_2, tau):
    return u_2 - u_1 - tau*F_call(u_2)

def derivative(u, tau):
    G = 2.959795663*(10**(-4))
    M = 1
    
    x = u[0]
    y = u[1]
    
    v1 = np.array([1,0,tau* G * M * ((x**2 + y**2)**(-3/2)) * (1 - 3 * (x**2)/(x**2+y**2)),(-tau) * 3 * G * M * y * x * ((x**2+y**2)**(-5/2))])
    v2 = np.array([0,1,(-tau) * 3 * G * M * y * x * ((x**2+y**2)**(-5/2)),tau * G * M * ((x**2+y**2)**(-3/2)) * (1 - 3 * (y**2)/(x**2+y**2))])
    v3 = np.array([-tau,0,1,0])
    v4 = np.array([0,-tau,0,1])
    
    return (np.vstack((v1,v2,v3,v4))).T
    

#%% Newton-Verfahren

def newton(x_k_alt, x_k, tau):
    x_kPlus1 = x_k - (np.linalg.inv(derivative(x_k, tau)))@(func(x_k_alt,x_k, tau))
    for i in range(1,1000):
        if np.linalg.norm(x_kPlus1 - x_k) < 1e-12:
            break
        else:
            x_kPlus1 = x_k - (np.linalg.inv(derivative(x_k, tau)))@(func(x_k_alt,x_k, tau))
            x_k_alt = x_k
            x_k = x_kPlus1
        
    return x_kPlus1

#%% Implizites Euler-Verfahren

def impl_euler(u, tau_0, time):
    time *= (365.2425)
    t = 0
    res = []
    u0 = u
    res.append(u0)

    #ersten Schritt explizit
    tau = tau_0
    t += tau
    #u1 = u0 + tau*F_call(u0)
    A = np.array([[0,0,0,0],[1/2,0,0,0],[0,1/2,0,0],[0,0,1,0]])
    b1 = np.array([1/2,1/2,0,0])
    b2 = np.array([1/6,1/3,1/3,1/6])
    f_i = []
    for i in range(4):
        sum = 0
        for j in range(i):
            sum += A[i,j]*f_i[j]
        f_i.append(F_call(u0 + tau*sum))
    
    sum1 = 0
    sum2 = 0
    for i in range(4):
        sum1 += b1[i]*f_i[i]
        sum2 += b2[i]*f_i[i]
    u_tk1_Plus1 = u0 + tau*sum1
    u_tk2_Plus1 = u0 + tau*sum2
    
    while np.linalg.norm(u_tk1_Plus1 - u_tk2_Plus1) > 1e-5:
        tau = 0.8 * tau
        
        f_i = []
        for i in range(4):
            sum = 0
            for j in range(i):
                sum += A[i,j]*f_i[j]
            f_i.append(F_call(u0 + tau*sum))
        sum1 = 0
        sum2 = 0
        for i in range(4):
            sum1 += b1[i]*f_i[i]
            sum2 += b2[i]*f_i[i]
        u_tk1_Plus1 = u0 + tau*sum1
        u_tk2_Plus1 = u0 + tau*sum2
    
    u1 = u_tk2_Plus1

    res.append(u1)
    
    tau = tau_0 
    
    while t < time:
        t += tau
        u2 = newton(u0,u1,tau)
        
        res.append(u2)
        
        # prepare for next step
        u0 = u1
        u1 = u2
        
    return np.array(res)

#%% Visualisation

plt.close('all')

u0 = np.array([1,0,0,21*24*60*60*(10**(-8))])
tau = 1 #time intervall we choose in days
Time = 4 #whole time intervall in years

#start = time.time()
impl_euler_res = impl_euler(u0, tau, Time)
#end = time.time()
#print(end-start)

figure, ax = plt.subplots()
plt.xlabel('AE')
plt.ylabel('AE')

x_impl_euler = impl_euler_res[:,0]
y_impl_euler = impl_euler_res[:,1]

plt.plot(x_impl_euler, y_impl_euler, 'midnightblue', label='implizites Euler-Verfahren')

x_neg = min(impl_euler_res[:,0])
x_pos = max(impl_euler_res[:,0])
y_neg = min(impl_euler_res[:,1])
y_pos = max(impl_euler_res[:,1])
        
ax.set_xlim(x_neg, x_pos)
ax.set_ylim(y_neg, y_pos)

ax.legend()

plt.show()           
        
